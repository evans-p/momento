services:

  cdn:
    build:
      context: .
      dockerfile: cdn/Dockerfile
    container_name: cdn
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=${POSTGRES_URL}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8080:8080"
    volumes:
      - C:/var/cdn/storage:/var/cdn/storage
    depends_on:
      - db
      - redis

  user-management:
    build:
      context: .
      dockerfile: user-management/Dockerfile
    container_name: user-management
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=${POSTGRES_URL}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8081:8080"
    depends_on:
      - db
      - redis

  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:14
    container_name: db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./db/ddl.sql:/docker-entrypoint-initdb.d/db_init.sql